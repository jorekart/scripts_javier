#!/usr/bin/env python
from __future__ import print_function

import imas
import sys
import shutil
from os import system
from sys import exit
#from idstools.cli import *  #module load IDStools

# --------------------------------------------------------------------------------
# --- Creates an entry for the Disruption database (adapted from create_db_entry
# --- by J. Artola). The quantities such as Ip or ne0 are 
# --- taken at the first time slice. Thus it is expected the the first time
# --- slice corresponds to the plasma right before the disruption
# -------------------------------------------------------------------------------

class entry_class:
    def __init__(self, shot, run, database, user, version, backend, ro):
        self.shot     = int(shot)
        self.run      = int(run)
        self.user     = user
        self.database = database
        self.version  = version
        self.backend  = backend
        self.ro       = ro

    def initialize_info(self, info):
        self.info     = info    # Info is a dictionary with specific data of the case

def create_yaml_file(entry):

    # Set up the name of the yaml file
    add0 = ""
    add0_length = 4-len(str(entry.run))
    for i in range(add0_length):
        add0 = add0+"0"

    filename_f = "ids_"+str(entry.shot)+add0+str(entry.run)+".yaml"
    filename   = "test"

    # Go for it: fill the yaml file
    f = open(filename, 'w')
    f.write("""# ------------------------------------------------------------------\n""")
    f.write("""# Status is "draft" when auto-generated by the create_yam function,\n""")
    f.write("""# to be changed to "active" once simulation and yaml files are ready\n""")
    f.write("""# to be changed to "obsolete" if the simulation becomes obsolete\n""")
    f.write("""# ------------------------------------------------------------------\n""")
    f.write("""status: \n""")
    f.write("""   """ + entry.info['status'] + "\n""")
    f.write("""\n""")
    f.write("""# -----------------------------------------------\n""")
    f.write("""# Reference name describing the simulation\n""")
    f.write("""# -----------------------------------------------\n""")
    f.write("""reference_name:\n""")
    f.write("""   """ + entry.info['name'] + "\n""")
    f.write("""\n""")
    f.write("""# ---------------------------------------------------------\n""")
    f.write("""# Responsible officer name(s), can be separated by commas\n""")
    f.write("""# ---------------------------------------------------------\n""")
    f.write("""responsible_name:\n""")
    f.write("""   """ + entry.ro + "\n""")
    f.write("""\n""")
    f.write("""# ------------------------------------------------------------------\n""")
    f.write("""# Shot number, run numbers, type, code, database attributes\n""")
    f.write("""# Type: interpretative, predictive, experiment\n""")
    f.write("""# Code: code name in case of simulation, 0 in case of experiment\n""")
    f.write("""# Machine: database name\n""")
    f.write("""# ------------------------------------------------------------------\n""")
    f.write("""characteristics:\n""")
    f.write("""    shot: %i\n""" % entry.shot)
    f.write("""    run: %i\n""" % entry.run)
    f.write("""    type: %s\n""" % 'tbd')
    f.write("""    workflow: %s\n""" % entry.info['workflow'])
    f.write("""    machine: %s\n""" % entry.info['machine'])
    f.write("""\n""")
    f.write("""# ------------------------------------------------------------------\n""")
    f.write("""# Relations to other entries in this database (if any)\n""")
    f.write("""# referred to by (shot,run) pairs\n""")
    f.write("""# ------------------------------------------------------------------\n""")
    f.write("""database_relations:\n""")
    f.write("""    replaces: \n""" )
    f.write("""    replaced_by: \n""")
    f.write("""\n""")
    f.write("""# --------------------------------------------------\n""")
    f.write("""# Machine description or specific configuration\n""")
    f.write("""# (scenario keys can be completed here if relevant)\n""")
    f.write("""# Units are [T], [-], [MA], [m-3] respectively\n""")
    f.write("""# --------------------------------------------------\n""")
    f.write("""scenario_key_parameters:\n""")
    #f.write("""    confinement_regime: %s\n""" % confinement_regime)
    f.write("""    disruption_type: %s\n""" % entry.info['disruption_type'])
    f.write("""    VD_direction: %s\n""" % entry.info['direction'])
    f.write("""    magnetic_field: %.2f\n""" % entry.info['Bt'])
    f.write("""    I_RE_max: %.2f \n""" % entry.info['REmax'])


    if entry.info['Ip'] == 0:
        f.write("""    plasma_current: tbd\n""")
        f.write("""    halo_fraction: tbd \n""")
    else:
        f.write("""    plasma_current: %.2f \n""" % entry.info['Ip'])
        halo_fraction =  1.e-6*abs(float(entry.info['halo_curr'])/float(entry.info['Ip']))
        f.write("""    halo_fraction:  %.2f \n""" %  halo_fraction)

    if float(entry.info['ne0']==0):
        f.write("""    central_electron_density: tbd\n""")
    else:
        f.write("""    central_electron_density: %.2e\n""" % entry.info['ne0'])

    f.write("""# --------------------\n""")
    f.write("""# Content description\n""")
    f.write("""# --------------------\n""")
    # Vertical bar is necessary here to deal with long lines in free description
    f.write("""free_description: |\n""")
    f.write("   "+entry.info['comment']+"\n")
    f.write("   DD version: "+entry.version+"\n")
    f.write("""\n""")
    f.write("""# ------------------------------------------------------------------------------\n""")
    f.write("""# List of filled IDSs with time quantities in seconds (start, end, step)\n""")
    f.write("""# It should be the output of the "ids_content" script, adapted from\n""")
    f.write("""# listidss, see IMAS-1010 (note: the data-entry has to be copied to a personal\n""")
    f.write("""# database for the script to work, see the example below):\n""")
    f.write("""#  ids_content -u schneim -d test -s 4321 -r 1\n""")
    f.write("""# ------------------------------------------------------------------------------\n""")
    f.write("""idslist:\n""")
    f.close()
    
    uri = imas.DBEntry.build_uri_from_legacy_parameters(
    backend_id=entry.backend,
    pulse=entry.shot,
    run=entry.run,
    db_name=entry.database,
    user_name=entry.user,
    data_version=entry.version
    )
    print(uri)

    # Complete the yaml file with the output of ids_content
    system('idslist -y -u "' + uri +'"'+ ' >> ' + filename)

    # Cleanup output from idslist command
    idslist_found = False
    with open(filename, "r") as infile, open(filename_f, "w") as outfile:
      for line in infile:
          if "idslist:" in line:
              idslist_found = True
          if idslist_found and not ":" in line:
              continue
          outfile.write(line)

    print("----> " + filename_f + " created.", file=sys.stdout)

    # Associated WATCHER file
    filename = "ids_"+str(entry.shot)+add0+str(entry.run)+".watcher"
    f = open(filename, 'w')
    if 1 == 1: # Done for alignment
        f.write("""----------------------------------------------------------------------------------\n""")
        f.write(""" Firstname		Name			E-mail\n""")
        f.write("""----------------------------------------------------------------------------------\n""")
        f.write(""" Javier			Artola   		javier.artola@iter.org\n""")
        f.close()
    print("----> " + filename + " created.", file=sys.stdout)

    return filename_f, filename


# IMPORTANT!!! CHECK BEFORE WRITTING YAML FILES!!
info = {}
info['status']          = 'active'
info['disruption_type'] = 'MD_mitigated'
info['comment']         = 'simulation description in IDM document AF7BAF'
info['workflow']        = 'JOREK_2D'
info['REmax']           = 0
info['machine']         = 'ITER'

database      = 'JOREK_disruptions'
user          = 'artolaj'
imas_version  = '4'
backend       = imas.imasdef.HDF5_BACKEND
ro            = 'Javier Artola'
run           = 1
local_db_path = '/home/ITER/'+user+'/public/imasdb/' + database + '/' + imas_version + '/'

shot_list_file = 'shot_list.txt'

with open(shot_list_file, 'r') as file:
    # Read the content of the file line by line into a list and strip newline characters
    shot_list = [line.strip().split() for line in file.readlines()]


for case in shot_list:

    entry = entry_class(case[0],run,database, user, imas_version, backend, 'Javier Artola')

    info['name'] = case[1]

    print(str(entry.shot) + ' ' + case[1])

    # Open the database and read the necessary IDSs
    input = imas.DBEntry(entry.backend,entry.database,entry.shot,entry.run,user_name=entry.user,data_version=entry.version)
    err,n = input.open()
    if err != 0:
        print('Shot ' + str(entry.shot) + ', run ' + str(entry.run) + ' does not exist', file=sys.stderr)
        print('----> Aborted.', file=sys.stderr)
        exit()

    # Get information from the IDSs
    # ne0
    try:
        ne0 = input.partial_get('core_profiles','profiles_1d(:)/electrons/density(0)')
        central_electron_density = ne0[0]   
    except:
        try:
             ne0 = input.partial_get('plasma_profiles','profiles_1d(:)/electrons/density(0)')
             central_electron_density = ne0[0]   
        except:
        print("core_profiles.profiles_1d[:].electrons.density[0] could not be read", file=sys.stderr)
        ne0 = 0
    
    # Btor
    try:
        magnetic_field = input.partial_get('equilibrium','vacuum_toroidal_field/b0(0)')
    except:
        print("equilibrium.vacuum_toroidal_field.b0 could not be read", file=sys.stderr)
        magnetic_field=0

    # Ip
    try:
        plasma_current = input.partial_get('summary','global_quantities/ip/value(0)') * 1e-6  # In MA
    except:
        Ip = 'tbd'
        print("summary.global_quantities.ip could not be read", file=sys.stderr)
        print("Plasma current will need to be provided by hand.", file=sys.stderr)

    # Check the plasma direction (needs better criteria)
    if 'up' in info['name']:
        VD_direction = 'up' 
    elif 'down' in info['name']:
        VD_direction = 'down'
    else:
        VD_direction = 'tbd' 

    # Ihalo
    try:
        disruption   = input.get("disruption")
        halo_current = max(disruption.global_quantities.current_halo_pol, key=abs)
    except:
        print("disruption.global_quantities.current_halo_pol could not be read", file=sys.stderr)

    info['ne0']        = central_electron_density
    info['direction']  = VD_direction
    info['Ip']         = plasma_current
    info['Bt']         = magnetic_field
    info['halo_curr']  = halo_current

    entry.initialize_info(info)

    filename_f, filename_watcher = create_yaml_file(entry)
    
    # Copy yaml files to local DB
    case_path = local_db_path + str(entry.shot )+ '/' + str(entry.run) + '/'    
    shutil.copy2(filename_f,       case_path + filename_f)
    shutil.copy2(filename_watcher, case_path + filename_watcher)
